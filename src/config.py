REMOTE_DIR = ".dos"

GET_VIEW_CODE = """

SELECT views.view_schema,
views.view_name,
sql_modules.definition AS view_definition
FROM 
(
	SELECT table_schema AS view_schema,
	table_name AS view_name,
	OBJECT_ID(CONCAT(table_schema,'.',table_name)) AS object_id
	FROM INFORMATION_SCHEMA.VIEWS
)AS views
INNER JOIN sys.sql_modules
ON views.object_id = sql_modules.object_id
ORDER BY views.view_schema,views.view_name;

"""

GET_TABLE_SQL = """

SELECT COLUMNS.table_schema,
COLUMNS.table_name,
COLUMNS.column_name,
COLUMNS.data_type,
CASE
	WHEN COLUMNS.data_type IN 
	(
		'char',
		'varchar',
		'nchar',
		'nvarchar'
	)
	THEN 
		CASE
			WHEN COLUMNS.character_maximum_length = -1
			THEN 'max'
			ELSE CAST(COLUMNS.character_maximum_length AS nvarchar(10))
		END
	WHEN COLUMNS.data_type IN 
	(
		'decimal',
		'numeric'
	)
	THEN '('+CAST(COLUMNS.numeric_precision AS nvarchar(10)) + ',' + CAST(COLUMNS.numeric_scale AS nvarchar(10)) + ')'
	ELSE NULL
END AS data_type_length,
COLUMNS.is_nullable,
COLUMNS.ordinal_position
FROM INFORMATION_SCHEMA.COLUMNS
INNER JOIN 
(
	SELECT table_schema,
	table_name
	FROM INFORMATION_SCHEMA.TABLES
	WHERE table_type = 'BASE TABLE'
)AS base_table
ON COLUMNS.table_schema = base_table.table_schema
AND COLUMNS.table_name = base_table.table_name
ORDER BY COLUMNS.table_schema,
COLUMNS.table_name,
COLUMNS.ordinal_position;



"""

GET_FUNCTION_SQL = """

SELECT SCHEMA_NAME(funcs.schema_id) AS function_schema,
OBJECT_NAME(funcs.object_id) AS function_name,
sql_modules.definition AS function_definition
FROM sys.objects AS funcs
INNER JOIN sys.sql_modules
ON funcs.object_id  = sql_modules.object_id
WHERE type IN 
(
	--scalar function
	'FN',
	--inlined table-valued function
	'IF',
	--table-valued function
	'TF'
)
ORDER BY SCHEMA_NAME(funcs.schema_id),
OBJECT_NAME(funcs.object_id);
"""

GET_INDEX_SQL = """

/*
 Exclude index generated by the system (System Index) such 
 as primary key , unique constraints , etc
*/
SELECT DISTINCT SCHEMA_NAME(objects.schema_id) AS index_schema,
	objects.name AS table_name,
    indexes.name AS index_name,
    columns.name AS index_column_name,
    --indexes.is_unique AS is_unique,
    --indexes.is_primary_key AS is_primary_key,
    indexes.type_desc AS index_type,
    index_column.index_column_id  AS column_position,
    index_column.is_included_column,
    index_column.is_descending_key 
FROM sys.indexes 
INNER JOIN sys.index_columns index_column 
ON indexes.object_id = index_column.object_id 
AND indexes.index_id = index_column.index_id
INNER JOIN sys.columns
ON index_column.object_id = columns.object_id 
AND index_column.column_id = columns.column_id
INNER JOIN sys.objects
ON indexes.object_id = objects.object_id
--exclude primary key index
WHERE indexes.is_primary_key = 0 
--exclude unique constraints
AND indexes.is_unique = 0 
--Consider only clustered and non-clustered indexes
AND indexes.type_desc IN 
(
	'CLUSTERED',
	'NONCLUSTERED'
)
AND SCHEMA_NAME(objects.schema_id)!='sys'
ORDER BY SCHEMA_NAME(objects.schema_id),
indexes.name,
index_column.index_column_id;

"""

GET_PROCEDURE_SQL = """

/*
Store Procedure code
*/
SELECT routines.routine_schema,
routines.routine_name,
sql_modules.definition AS routines_definition
FROM
(
	SELECT routine_schema,
	routine_name,
	OBJECT_ID(CONCAT(routine_schema,'.',routine_name)) AS object_id
	FROM INFORMATION_SCHEMA.ROUTINES
	WHERE routine_type = 'PROCEDURE'
) AS routines
INNER JOIN sys.sql_modules
ON routines.object_id = sql_modules.object_id
ORDER BY routines.routine_schema,
routines.routine_name;

"""

GET_EXTERNAL_DATA_SOURCE_SQL = """

SELECT external_data_sources.name AS external_data_source_name,
external_data_sources.type_desc AS external_data_source_type,
external_data_sources.location AS external_data_source_location,
credentials.name AS credential_name
FROM sys.external_data_sources
LEFT JOIN sys.database_scoped_credentials AS credentials
ON external_data_sources.credential_id = credentials.credential_id
ORDER BY external_data_sources.name;

"""


GET_EXTERNAL_TABLE_SQL = """

SELECT SCHEMA_NAME(external_tables.schema_id) AS external_table_schema, 
external_tables.name AS external_table_name,
all_columns.name AS column_name,
types.name AS data_type,
CASE
	WHEN types.name IN 
	(
		'char',
		'varchar',
		'nchar',
		'nvarchar'
	)
	THEN 
		CASE
			WHEN all_columns.max_length = -1
			THEN 'max'
			ELSE CAST(all_columns.max_length AS nvarchar(10))
		END
	WHEN types.name IN 
	(
		'decimal',
		'numeric'
	)
	THEN '('+CAST(all_columns.precision AS nvarchar(10)) + ',' + CAST(all_columns.scale AS nvarchar(10)) + ')'
	ELSE NULL
END AS data_type_length,
all_columns.is_nullable,
all_columns.column_id AS ordinal_position,
external_tables.location AS external_location,
external_data_sources.name AS external_data_source_name,
external_file_formats.name AS file_format_name
FROM sys.external_tables
LEFT JOIN sys.external_data_sources 
ON external_tables.data_source_id =  external_data_sources.data_source_id
LEFT JOIN sys.external_file_formats
ON external_tables.file_format_id = external_file_formats.file_format_id
LEFT JOIN sys.all_columns 
ON external_tables.object_id = all_columns.object_id
LEFT JOIN sys.types
ON all_columns.user_type_id = types.user_type_id
ORDER BY SCHEMA_NAME(external_tables.schema_id),
external_tables.name,
all_columns.column_id;

"""

GET_EXTERNAL_FILE_FORMAT_SQL = """

SELECT name AS file_format_name,
format_type,
field_terminator,
string_delimiter,
use_type_default,
first_row
FROM sys.external_file_formats
ORDER BY file_format_name;

"""

