REMOTE_DIR = ".dos"

GET_VIEW_CODE = """

SELECT table_schema AS view_schema,
table_name AS view_name,
view_definition
FROM INFORMATION_SCHEMA.VIEWS
ORDER BY table_schema,table_name;

"""

GET_TABLE_SQL = """

SELECT table_schema,
table_name,
column_name,
data_type,
CASE
	WHEN data_type IN 
	(
		'char',
		'varchar',
		'nchar',
		'nvarchar'
	)
	THEN 
		CASE
			WHEN character_maximum_length = -1
			THEN 'max'
			ELSE CAST(character_maximum_length AS nvarchar(10))
		END
	WHEN data_type IN 
	(
		'decimal',
		'numeric'
	)
	THEN '('+CAST(numeric_precision AS nvarchar(10)) + ',' + CAST(numeric_scale AS nvarchar(10)) + ')'
	ELSE NULL
END AS data_type_length,
is_nullable,
ordinal_position
FROM INFORMATION_SCHEMA.COLUMNS
ORDER BY table_schema,
table_name,
ordinal_position;

"""

GET_FUNCTION_SQL = """

SELECT SCHEMA_NAME(schema_id) AS function_schema,
OBJECT_NAME(object_id) AS function_name,
OBJECT_DEFINITION(object_id) AS function_definition
FROM sys.objects
WHERE type IN 
(
	--scalar function
	'FN',
	--inlined table-valued function
	'IF',
	--table-valued function
	'TF'
)
ORDER BY SCHEMA_NAME(schema_id),
OBJECT_NAME(object_id);

"""

GET_INDEX_SQL = """

/*
 Exclude index generated by the system (System Index) such 
 as primary key , unique constraints , etc
*/
SELECT DISTINCT SCHEMA_NAME(objects.schema_id) AS index_schema,
	objects.name AS table_name,
    indexes.name AS index_name,
    columns.name AS index_column_name,
    --indexes.is_unique AS is_unique,
    --indexes.is_primary_key AS is_primary_key,
    indexes.type_desc AS index_type,
    index_column.index_column_id  AS column_position,
    index_column.is_included_column,
    index_column.is_descending_key 
FROM sys.indexes 
INNER JOIN sys.index_columns index_column 
ON indexes.object_id = index_column.object_id 
AND indexes.index_id = index_column.index_id
INNER JOIN sys.columns
ON index_column.object_id = columns.object_id 
AND index_column.column_id = columns.column_id
INNER JOIN sys.objects
ON indexes.object_id = objects.object_id
--exclude primary key index
WHERE indexes.is_primary_key = 0 
--exclude unique constraints
AND indexes.is_unique = 0 
--Consider only clustered and non-clustered indexes
AND indexes.type_desc IN 
(
	'CLUSTERED',
	'NONCLUSTERED'
)
AND SCHEMA_NAME(objects.schema_id)!='sys'
ORDER BY SCHEMA_NAME(objects.schema_id),
indexes.name,
index_column.index_column_id;

"""

GET_PROCEDURE_SQL = """

/*
Store Procedure code
*/
SELECT routines.routine_schema,
routines.routine_name,
sql_modules.definition AS routines_definition
FROM
(
	SELECT routine_schema,
	routine_name,
	OBJECT_ID(CONCAT(routine_schema,'.',routine_name)) AS object_id
	FROM INFORMATION_SCHEMA.ROUTINES
	WHERE routine_type = 'PROCEDURE'
) AS routines
INNER JOIN sys.sql_modules
ON routines.object_id = sql_modules.object_id
ORDER BY routines.routine_schema,
routines.routine_name;

"""

